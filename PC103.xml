<?xml version="1.0" ?>


<!--
	See http://jakarta.apache.org/gump/workspace.html for the
	informal dtd of this xml file and more details about the
	possible elements.
	
    This represents the combination of projects (either 
    referenced directly or indirectly, via profiles) that 
    are to be built together. By default, workspaces are 
    named after the hostname of the computer which you are 
    building on.
    
    * = required
    @ = recomended
    
    
  * version  Which version of the Gump dtd this workspace was
           defined against. The current version is "0.3".
    
              
  @ sync     The name of the command, along with any desired parameters,
             used to synchronize the build directory with the cvs 
             directory. This can make a considerable performance advantage 
             over the default action which is to recursively remove 
             the directory and copy the entire directory tree. 
             [Recommended : "rsync -r -a - -delete"]
             
  (Gump dirs)
  |
  |
   \             
  @ basedir  Fully qualified directory into which all projects
    |        will be extracted built. 
    |        [Defaults to ...]
    |         
    |\-cvsdir   Workarea for cvs extracts. The generated update
    |  |        script will do the cvs checkouts or updates into 
    |  |         this directory. The generated build script will 
    |  |        copy the results into the basedir prior to building.
    |  |        [Defaults to ${basedir}/cvs]        
    |  |          
    |  logdir   Directory into which the generated html logs are placed.  	 
    |  |        [Defaults to ${basedir}/log] 
    |  |  
    |  cachedir Directory into which the remote descriptors and other
    |  |        stuff Gump needs are cached.  	 
    |  |        [Defaults to ${basedir}/cache]     
    |  |
    |  workdir  Directory into which generated work items are placed.
    |           [Defaults to ${basedir}/work]   
    |
  @ pkgdir   Default directory in which to find projects which 
    |        are installed as packages instead of being built. 
    |         [Defaults to ...]
    |         
    jardir   Directory into which the generated jars are copied. 
             This May be useful for a number of reasons. First, 
             the results themselves may be something worth publishing. 
             Second, it allows an greater range of development - e.g., 
             build clean won't affect the availability of jars. Final
             ly, it may allow you to get further without hitting 
             command line length restrictions.  	  
    
             [If this option is not specified, the jars aren't copied]
    
-->
<workspace version="0.4-dev"
           sync=""
           basedir="C:\jbprojects"
           cvsdir="C:\jbprojects"           
           pkgdir="C:\jbprojects\krysalis-centipede\tools\jars"
           jardir="C:\jbprojects\krysalis-centipede\tools\jars">
           

  <!-- this tells Ant to completely ignore all classpath
      elements in build scripts. This makes sure we build
      the latest version of everything. Note you could
      comment out this line and gump would still run fine.
      The thing you loose then is the continuous integration.
      See: http://jakarta.apache.org/gump/why.html for more
      background. -->
	             
  <property name="build.sysclasspath" value="only"/>

	<!-- this references your profile description. A profile is a
	     collection of projects and repositories that are logically
	     to be considered a unit. A profile can provide a consistent
	     set of installable dependencies, or tagged versions of cvs
	     modules to be used.-->
	     
  <!-- full gump profile--> 	     
  <!-- <profile href="profile/gump.xml"/> -->
  
  <!-- my profiles --> 
  <profile href="profile/krysalis.xml"/>

  <profile href="profile/apache.xml"/> 
  <profile href="profile/apache-avalon.xml"/> 
  <profile href="profile/apache-cocoon.xml"/>    

  <!-- Project overrides -->

	<!-- Repository overrides can be used to override the cvs repository
	     definitions in the repository/ dir. This is handy if you want to
	     check out using a different method than the default one, for
	     example using ssh tunneling or a local machine connection.
	     
	     As I am a committer to parts of jakarta, I use ssh tunnelling and
	     a different cvsroot, so the cvs checkout gives me write access to
	     the jakarta modules. -->
	<!--<repository name="jakarta" method="ext" user="leosimons" path="/home/cvs"/>-->


</workspace>
