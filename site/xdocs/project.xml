<?xml version="1.0"?>
<document>

  <properties>
    <author email="rubys@us.ibm.com">Sam Ruby</author>
    <title>Gump</title>
  </properties>

<body>

  <section name="project">
    <p>A project is the atomic unit of integration.  It can describe an
    installable package or a buildable product.  The nested elements of
    a project definition fall into three different "groups", each optional:</p>

    <ul>
    <li>Build instructions: &lt;ant&gt; and &lt;script&gt;.  Describes how to
    produce the outputs from the inputs.</li>
    <li>Inputs: &lt;depend&gt;, &lt;option&gt;, and &lt;work&gt;.  Describes
    where to find the inputs (primarily jar files, but can be directories and
    files).</li>
    <li>Outputs: &lt;home&gt; and &lt;jar&gt;.  Describes where to locate
    the output files.</li>
    </ul>

    <p>Note that &lt;depend&gt; elements nested within &lt;ant&gt;
    elements are precisely equivalent to specifying both a property to be
    passed to Ant, as well as a separate depend element.</p>

    <table>
      <tr>
        <th>Attribute</th>
        <th>Description</th>
        <th>Required?</th>
      </tr>
      <tr>
        <td>name</td>
        <td>The name of the project.</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>target</td>
        <td>Override the <a href="ant.html">ant</a> target to be used.</td>
        <td>No</td>
      </tr>
    </table>

    <p/>

    <subsection name="ant">
      <p>Identifies this project as "buildable", and specifies the
      target to build and the properties to be passed to ant.  The full
      description of this XML element can be found
      <a href="ant.html">here</a></p>

      <p><a href="http://jakarta.apache.org/ant/">Jakarta Ant</a> is the
      defacto build tool used by a large number of Open Source Java
      projects.</p>
    </subsection>

    <subsection name="script">
      <p>Identifies this project as "buildable", and specifies the
      script to be executed in order to make this happen.  The assumption
      is that the script can be invoked in a platform independent manner,
      though the contents of the script may be platform specific.
      Specifically, if the name of the script is "name", it will be
      invoked as follows:</p>

      <p>At the present time, the only use of this is during the bootstrap
      process for Ant.</p>

      <ul>
        <li>On Windows/batch, "call .\name.bat"</li>
        <li>On Unix/bash, "./name.sh"</li>
      </ul>

      <table>
        <tr>
          <th>Attribute</th>
          <th>Description</th>
          <th>Required?</th>
        </tr>
        <tr>
          <td>name</td>
          <td>The name of the script to execute.</td>
          <td>Yes</td>
        </tr>
      </table>
    </subsection>

    <subsection name="depend">
      <p>Specifies the name of a required prerequisite project.  If a
      definition for that project is not found in the workspace, the
      generation will fail.</p>

      <p>For a build "all", the invocation of ant or the script is bypassed
      if any of the outputs of the specified project can not be found.</p>

      <p>For both script and ant based builds, any jars defined by the
      specified project as outputs are added to the CLASSPATH prior to
      invoking the build operation.</p>

      <table>
        <tr>
          <th>Attribute</th>
          <th>Description</th>
          <th>Required?</th>
        </tr>
        <tr>
          <td>project</td>
          <td>The name of the project depended on.</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td>inherit</td>
          <td>Specifies whether dependendencies of this dependency are to be
          inherited.  Default is "none".  Other choices are "all" which will
          copy all dependencies as, "runtime" which will only copy the runtime
          dependencies, and "hard" which will not only copy all
          dependencies, but will also convert option elements into depend
          elements in the process, and "jars" which will actually copy the
          dependent jars into the list of jars exported by this project.</td>
          <td>No</td>
        </tr>
        <tr>
          <td>runtime</td>
          <td>Specifies whether this dependency is needed at runtime.
          Choices are "true" and "false" with the default being false.</td>
          <td>No</td>
        </tr>
      </table>
    </subsection>

    <subsection name="option">
      <p>Specifies the name of an optional prerequisite project.  If a
      definition for that project is not found in the workspace, the
      dependency is ignored.</p>

      <p>For both script and ant based builds, any jars defined by the
      specified project as outputs are added to the CLASSPATH prior to
      invoking the build operation.  If the files are not present,
      this will have little effect.</p>

      <table>
        <tr>
          <th>Attribute</th>
          <th>Description</th>
          <th>Required?</th>
        </tr>
        <tr>
          <td>project</td>
          <td>The name of the project depended on.</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td>inherit</td>
          <td>Specifies whether dependendencies of this dependency are to be
          inherited.  Default is "none".  Other choices are "all" which will
          copy all dependencies as, "runtime" which will only copy the runtime
          dependencies, and "hard" which will not only copy all
          dependencies, but will also convert option elements into depend
          elements in the process.</td>
          <td>No</td>
        </tr>
        <tr>
          <td>runtime</td>
          <td>Specifies whether this dependency is needed at runtime.
          Choices are "true" and "false" with the default being false.</td>
          <td>No</td>
        </tr>
      </table>
    </subsection>

    <subsection name="work">
      <p>Adds a directory or a file to the class path.  This is to allow
      projects which have compilation dependencies on byproducts of the build
      (e.g., tests which import the project itself).  This is necessary when
      using the Ant build.sysclasspath="ignore".</p>

      <p>It generally is OK if the directory is not present prior to the
      build.  However, if this directory is deleted during the course of
      the build, the behavior of the JVM may become unpredictable.</p>

      <p>If neither the parent nor the nested attributes are present, then
      the srcdir for the module is added to the classpath.</p>

      <table>
        <tr>
          <th>Attribute</th>
          <th>Description</th>
          <th>Required?</th>
        </tr>
        <tr>
          <td>parent</td>
          <td>Name of a directory or file, relative to the base directory
          of the workspace.</td>
          <td>No</td>
        </tr>
        <tr>
          <td>nested</td>
          <td>Name of a directory or file, relative to the srcdir of the module
          containing this project.</td>
          <td>No</td>
        </tr>
      </table>
    </subsection>

    <subsection name="home">
      <p>The home directory for a project is the directory which contains the
      files referenceable by another project.  In many cases, it is possible
      for another project element by the same name (see the
      <a href="overview.html">overview</a>) to extend a project definition
      for an installable package in such a way that the result actually builds
      the project.</p>

      <p>A home attribute on a project definition will override this value.</p>

      <p>A package attribute on a project will provide a default for this
      value.  Such a default would be relative to the workspace pkgdir</p>

      <p>If none of these attributes or elements, the default value is
      the srcdir for the module.</p>

      <table>
        <tr>
          <th>Attribute</th>
          <th>Description</th>
          <th>Required?</th>
        </tr>
        <tr>
          <td>parent</td>
          <td>Name of a directory or file, relative to the base directory
          of the workspace.</td>
          <td>No</td>
        </tr>
        <tr>
          <td>nested</td>
          <td>Name of a directory or file, relative to the srcdir of the module
          containing this project.</td>
          <td>No</td>
        </tr>
      </table>
    </subsection>

    <subsection name="jar">
      <p>The name of an output jar, relative to the home directory.</p>

      <table>
        <tr>
          <th>Attribute</th>
          <th>Description</th>
          <th>Required?</th>
        </tr>
        <tr>
          <td>name</td>
          <td>The name of the jar</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td>id</td>
          <td>Provides a unique id which can be used to provide selection
          between multiple jars definitions.</td>
          <td>No</td>
        </tr>
        <tr>
          <td>type</td>
          <td>If the value of this attribute is "boot" then the jar is
          prepended to the bootclasspath instead of being appended to the 
          classpath.  This attribute is ignored unless bootclass="yes"
          is specified on the <a href="workspace.html">workspace</a>.</td>
          <td>No</td>
        </tr>
      </table>
    </subsection>

    <subsection name="javadoc">
      <p>This declares where the outputs of the
      <a href="http://java.sun.com/j2se/javadoc/index.html">javadoc</a> tool
      outputs are placed.  This option only has any meaning if the
      <a href="workspace.html#javadoc">&lt;javadoc&gt;</a> element is present
      in the workspace definition.</p>

      <table>
        <tr>
          <th>Attribute</th>
          <th>Description</th>
          <th>Required?</th>
        </tr>
        <tr>
          <td>nested</td>
          <td>Name of a directory or file, relative to the srcdir of
          the module containing this project. <b>Note that this
          ignores any <a href="#home">&lt;home&gt;</a>
          settings.</b></td>
          <td>No</td>
        </tr>
        <tr>
          <td>parent</td>
          <td>Name of a directory or file, relative to the base directory
          of the workspace.</td>
          <td>No</td>
        </tr>
        <tr>
          <td>project</td>
          <td>Label to use in the javadoc listing (see below). Default
          is the name of the project.</td>
          <td>No</td>
        </tr>
        <tr>
          <td>module</td>
          <td>Make the entry for this project in the javadoc listing
          (see below) appear under the named instead of the enclosing
          module.</td>
          <td>No</td>
        </tr>
      </table>

      <p>&lt;javadoc&gt; supports a nested &lt;description&gt;
      element, which can be used to set the title in the javadoc
      listing.  If no &lt;description&gt; element has been specified,
      the title defaults to the description of the
      project. &lt;description&gt; itself only supports nested
      text and an optional dir attribute.</p>

      <p>The &lt;javadoc&gt; elements of all projects are used to
      create two pages, &quot;javadoc.html&quot; (like 
      <a href="http://nagoya.apache.org/~rubys/gump/javadoc.html">this</a>)
      and &quot;nojavadoc.html&quot; (like 
      <a href="http://nagoya.apache.org/~rubys/gump/nojavadoc.html">this</a>)
      listing the available sets of documentation and the modules
      without documentation.</p>

      <p>There are three different layouts a &lt;javadoc&gt; element
      may create in the javadoc listing &quot;javadoc.html&quot;:</p>

      <ol>
        <li>This is the only &lt;javadoc&gt; element associated with
        the module, the result will look like<br/><br/>
        <a href="#">label</a> - description<br/><br/></li>

        <li>There are several &lt;javadoc&gt; elements associated with
        the module, their labels are different from the name of the
        module - the result will look like<br/><br/>
        <b>name of the module</b> - description of the module
        <blockquote>
            <a href="#">label</a> - description<br/>
            <a href="#">label2</a> - description2<br/>
        </blockquote></li>

        <li>There are several &lt;javadoc&gt; elements associated with
        the module, their labels are all the same as the name of the
        module - the result will look like<br/><br/>
        <b>name of the module</b> - description of the module
        <blockquote>
            <a href="#">description</a><br/>
            <a href="#">description2</a><br/>
        </blockquote></li>

      </ol>

      <p><em>label</em> in this lists will be created from the project
      attribute and <em>description</em> from the description child
      element of &lt;javadoc&gt;</p>

      <p>If a given project wants to publish more than one javadoc
      set, multiple &lt;description&gt; elements like in</p>

      <source><![CDATA[
    <javadoc nested="java/build/docs/javadocs" project="xml-xerces2">
      <description dir="api">XML Standard API</description>
      <description dir="xni">Xerces Native Interface</description>
      <description dir="xerces">Xerces2 Implementation</description>
      <description dir="other">Other Classes</description>
    </javadoc>
]]></source>

      <p>must be used.</p>

    </subsection>

    <subsection name="nag">
      <p>If this element is present, an entry for this project will be
      created in the file naglist.  This enables email reports of
      build failures.</p>

      <table>
        <tr>
          <th>Attribute</th>
          <th>Description</th>
          <th>Required?</th>
        </tr>
        <tr>
          <td>subject</td>
          <td>value for the Subject header of the mail report.
          Defaults to &quot;Build Failure - &quot; and the name of the
          project.  Will be prefixed by the prefix defined in the <a
          href="workspace.html#nag">workspace</a>.</td>
          <td>No</td>
        </tr>
        <tr>
          <td>from</td>
          <td>Sender address for the email report.</td>
          <td>Yes, unless there is a &quot;from&quot; attribute in
          each nested regexp element.</td>
        </tr>
        <tr>
          <td>to</td>
          <td>Recipient of the email report.  Will be overridden by a
          &quot;to&quot; attribute in the 
          <a href="workspace.html#nag">workspace</a>.</td>
          <td>Yes, unless there is a &quot;to&quot; attribute in each
          nested regexp element.</td>
        </tr>
      </table>

      <p>A build failure is detected by matching the output of the
      build against Perl regular expressions, the default is
      <code>/BUILD FAILED/</code>.  The regular expressions are
      specified using nested regexp elements - you can associate
      different email addresses and subjects with each expression.</p>

      <p>The regexp element supports the same attributes as the nag
      element with an additional (required) pattern attribute.  This
      attribute specifies the Perl regular expression to be used when
      looking for a build failure.</p>

      <p>The nag element itself can be used to set default values for
      nested child elements:</p>

      <source><![CDATA[
<nag from="from@example.org" to="to@example.org" />
]]></source>

      <p>is a short-cut for</p>

      <source><![CDATA[
<nag>
  <regexp pattern="/BUILD FAILED/"
          from="from@example.org" 
          to="to@example.org" 
          subject="Build Failure - @name of project element@"/>
</nag>
]]></source>

    </subsection>
  </section>
</body>
</document>

