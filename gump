#!/bin/bash
#
# Copyright 2004-2005 The Apache Software Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# The command line interface to the common gump tasks.
#
##############################################################################
# Documentation
##############################################################################

# Documentation for the different commands.
function usage
{
  case $1 in
    help-variables)
      echo "
      Gump needs various other programs available in order to run. You
      can change which programs gump tries to use using environment variables.
      In addition, several core gump settings are also customizable using
      environment variables.
      
      You can set all these variables (except for GUMP_HOME) in the file
      
        $GUMP_ENV_FILE
      
      the location of this file is found as follows:
      
        GUMP_HOME/GUMP_HOST-settings.sh
      
      Recognized variables are:
      
        GUMP_HOME     -- location of the gump subversion checkout. Defaults
                         to the current working directory if possible.
        GUMP_HOSTNAME -- name of this machine. Defaults to the output from the
                         hostname command.
        GUMP_ENV_FILE -- location of the file that contains the custom
                         settings to load (i.e. the file mentioned above). You
                         can override GUMP_HOME and GUMP_HOSTNAME here, but that
                         may have some unpredictable effects.
        GUMP_PYTHON   -- the name of the python executable to use. Defaults to
                         the latest version of python that is installed. Note
                         that pygump is supported only on python2.3.
        GUMP_WORKDIR  -- the directory that pygump will generate various files in
                         (like log output). Defaults to GUMP_HOME/pygump/work.
        JAVA_HOME     -- the location of a java development kit. Gump tries to
                         work with any JDK, but results may vary (for example,
                         both ant and maven require jdk 1.2 at least).
        
      These variables are only used by dynagump:

        JAVA_OPTIONS  -- Extra options to pass to the JVM.
        JETTY_PORT    -- Override the default port for Jetty. Defaults to 8080.
        JETTY_ADMIN_PORT -- The port where the jetty web administration should
                         bind. Defaults to 8081.
        JAVA_DEBUG_PORT -- The port the JVM debug server should listen to.
                         Defaults to 8082.
      
      Of course, the various commands that gump issues may also behave
      differently based on environment variables. For example, maven reacts to
      MAVEN_HOME, many make-based build scripts respect the CC environment
      variable, etc etc.
"
      ;;
    run)
      echo "
      Run pygump.

      Usage:
        $0 run [gump.py-args ...]

      See http://wiki.apache.org/gump/GumpCommandLineOptions for more
      information about the options pygump accepts. The one mandatory
      argument is the "project expression" detailing what to run. You
      will usually want "all" here.
"
# TODO: document Pygump CLI args!
      ;;
    kill)
      echo "
      Prematurely end a pygump run.
      
      Usage:
        $0 kill
"
      ;;
    debug)
      echo "
      Run pygump in debug mode.
      
      Usage:
        $0 debug [gump.py-args ...]
    
      This is not the same as executing the 'run' command with a '--debug'
      parameter. Using this command will actually start the command line
      debugger pdb to run gump in, whereas the '--debug' option customizes
      the log verbosity gump will use.
"
      ;;
    test)
      echo "
      Run pygump its unit tests.

      Usage:
        $0 test
"
        ;;
    dynagump)
      echo "
      Run Dynagump.

      Usage:
        $0 dynagump dynagump-action [dynagump-args ...]

      Run
        $0 dynagump help
      for more information about the options dynagump accepts. If no action is
      specified, gump passes run as the action to execute.
"
      ;;
    update-host)
      echo "
      Updates the gump installation on the specified host.
      
      Usage:
        $0 update-host hostname [hostname-script-args ...]
      
      Some gump hosts are managed by keeping some of their config data in
      our subversion repository, under the $GUMP_HOME/hosts/
      directory. This command will attempt to ssh into the specified host
      machine and perform the neccessary svn update commands to bring the host
      in sync with the material in the subversion repository.
      
      A custom script named $GUMP_HOME/hosts/hostname-update.sh is
      ran for each host. See each of these scripts for information on the
      custom settings available with a particular host.
"
      ;;
    create-database)
      echo "
      Create a new MySQL database with the gump database schema.

      Usage:
        $0 create-database [database-name] [mysql-args ...]

      If no database-name is specified, gump will assume the database should
      be named "gump". All other provided arguments are passed on to mysql, so
      if you need to connect using a different username and password you can
      do so, for example
      
        $0 create-database gump -u gump -p password_for_gump_user
      
      This command will fail if the specifed database already exists.
"
      ;;
    pycompile)
      echo "
      Compiles all pygump source files.

      Usage:
        $0 pycompile.
      
      Please run this before committing changed sourcefiles, to make sure they
      at least compile.
"
        ;;
    *)
      echo "
      Utility commandline interface for Gump.
     
      Usage:
        $0 command [opts ...]
     
      Available commands are:
     
        run             -- run pygump
        debug           -- run pygump in debug mode
        test            -- run the pygump unit tests
        dynagump        -- run the dynagump web application server
        update-host     -- update the configuration of a gump host
        create-database -- create a new gump MySQL database
        pycompile       -- compile all pyump source files
     
      Run
     
        $0 help [command]
     
      for more information about a particular command.
      
      Run
      
        $0 help-variables
      
      for more information about the environment variables that alter gump its
      behaviour.
"
      ;;
  esac
}

##############################################################################
# Setup methods
##############################################################################
# All of these are guaranteed to have run before any other method is
# called, so other methods may safely assume that the basic environment
# these methods put in place is there.

# Determine the short form of the hostname
function find_hostname
{
  if [[ ! -z "$GUMP_HOSTNAME" ]]; then
    return
  fi
  
  local hostnamecommand=`which hostname`
  if [[ -z "$hostnamecommand" || "$hostnamecommand" == "no*" ]]; then
    error "GUMP_HOSTNAME is not set and the hostname command is not
available to determine it!"
  fi
  
  local cygwin=false;
  case "`uname`" in
    CYGWIN*) cygwin=true ;;
  esac
  if $cygwin; then
    export GUMP_HOSTNAME=`hostname`
  else
    export GUMP_HOSTNAME=`hostname -s`
  fi
}

# Determine the location gump is installed in
function find_home
{
  if [[ ! -z "$GUMP_HOME" ]]; then
    return
  fi
  
  # look for this file
  local current=`pwd`
  local thisscript="`pwd`/gump"
  if [[ -f "$thisscript" ]]; then
    # guess...
    export GUMP_HOME="$current"
    return
  fi
  
  # look for the path to this file
  local homedir=`dirname $0`
  local thisscript="$homedir/gump"
  if [[ -f "$thisscript" ]]; then
    # guess...
    export GUMP_HOME="$homedir"
    return
  fi
  
  # not found - complain!
  error "GUMP_HOME is not set and failed to determine it. Please set it to
the root of your svn checkout!"
}

# Determine the location of the work directory
function find_workdir
{
  if [[ ! -z "$GUMP_WORKDIR" ]]; then
    return
  fi
  
  export GUMP_WORKDIR="$GUMP_HOME/pygump/work"
  if [[ ! -d $GUMP_WORKDIR ]]; then
    mkdir "$GUMP_WORKDIR"
  fi
}

# Determine the location of the environment variables script
function find_env_file
{
  export GUMP_ENV_FILE="$GUMP_HOME/$GUMP_HOSTNAME-settings.sh"
}

# Determine the python command to use
function find_python
{
  if [[ ! -z "$GUMP_PYTHON" ]]; then
    return
  fi

  local python=`which python2.4`
  if [[ -z "$python" || "$python" == "no"* ]]; then
    python=`which python2.3`
  fi
  if [[ -z "$python" || "$python" == "no"* ]]; then
    python=`which python2.2`
  fi
  if [[ -z "$python" || "$python" == "no"* ]]; then
    python=`which python2`
  fi
  if [[ -z "$python" || "$python" == "no"* ]]; then
    python=`which python`
  fi
  if [[ -z "$python" || "$python" == "no"* ]]; then
    python="python" # hope for the best...
  fi
  
  export GUMP_PYTHON="$python"
}

# Load the environment variables script if it exists, then fill out missing
# but required variables
function setup_env
{
  find_hostname
  find_home

  find_env_file
  if [[ -f "$GUMP_ENV_FILE" ]]; then
    . "$GUMP_ENV_FILE"
  fi
  
  find_python
  find_workdir
}

##############################################################################
# Utility functions
##############################################################################
# These functions don't represent actual commands but rather are utilized
# from the command functions.

# Print an error message and then exit.
function error
{
  echo "$0: Fatal error!

$1"
  exit 1
}

# Print a friendly error message if some dependency is missing.
#
# Arguments:
#   - name of the command
#   - url to download the package that provides it
function check_command
{
  local cmd=`$GUMP_HOME/bin/PrintPath $1`;
  if [[ -z "$cmd" && ! -x "$1" ]]; then
     error "Cannot find $1. Please retrieve it from 

     $2
     
and install it. If it is already installed, modify your $PATH variable
to point to it. You can customize the $PATH variable inside a file named

  $GUMP_ENV_FILE

if you wish."
  fi
}

# Print a friendly error message if an environment variable is not set.
#
# Arguments:
#   - name of the variable
#   - description of what the variable should be set to
function check_env_var
{
  local dereferenced="${!1}"
  if [[ -z "$dereferenced" ]]; then
    error "The variable $1 has not been set. It should be set to
$2.

You can either set this before invoking gump, or set it in a file
named

  $GUMP_ENV_FILE

if you wish."
  fi
}

# Print a friendly error message i a python library is not available.
#
# Arguments:
#   - the library to import
#   - url to download location of the library
function check_pylib
{
  cat > "$GUMP_HOME/pycmd.tmp.py" <<ENDCOMMAND
try:
  import $1
except:
  print "error"
ENDCOMMAND
  local cmd=`$GUMP_PYTHON "$GUMP_HOME/pycmd.tmp.py"`
  result=`$cmd`
  rm -f "$GUMP_HOME/pycmd.tmp.py"

  if [[ ! -z "$result" ]]; then
    error "Required python library $1 is not available.
Please download it from

  $2

and install it."
  fi
}

# Print a friendly error message if the environment is not set up correctly.
function check_environment
{
  # PrintPath doesn't deal with absolute paths properly
  check_command $GUMP_PYTHON "http://www.python.org/"
  #check_command "pkill" "http://sourceforge.net/projects/proctools"
  check_command "mysql" "http://www.mysql.com/"
  check_command "mysqladmin" "http://www.mysql.com/"
  check_command "ssh" "http://www.openssh.org/"

  check_env_var "JAVA_HOME" "the location of the java jdk"
  
  #check_pylib "rdflib" "http://rdflib.net/"
  check_pylib "MySQLdb" "http://sourceforge.net/projects/mysql-python"
}

# create a .pid file
function lock
{
  local pidfile="$GUMP_HOME/pygump/pygump.pid"
  if [[ -f "$pidfile" ]]; then
    error "Pygump lock file $pidfile already exists. Run

$0 kill

to stop the current pygump un."
  fi
  
  echo $$ > $pidfile
}

# remove our .pid file
function unlock
{
  local pidfile="$GUMP_HOME/pygump/pygump.pid"
  if [[ ! -f "$pidfile" ]]; then
    error "Pygump lock file $pidfile not found!"
  fi
  
  local pid=`cat $pidfile`
  if [[ "$$" != "$pid" ]]; then
    error "Pygump lockfile pid is $pid but we're $$!"
  fi
  
  rm -f $pidfile
}

#############################################################################
# Action functions
#############################################################################
# There is one of these for each command that gump understands. Stricly
# speaking, the usage function above is also an action function, but we put
# it at the top of the file for readability :-D

# compile all of pygump
function pycompile
{
  # get rid of old stuff
  find $GUMP_HOME/pygump -type f -name '*.pyc' | xargs rm -Rf

  # compile everything
  $GUMP_PYTHON -c "import re; from compileall import compile_dir; compile_dir('$GUMP_HOME/pygump/python', 10, '$GUMP_HOME', False, re.compile('\.svn'), True)"

  # add pygump to python path
  local oldpythonpath="$PYTHONPATH"
  if [[ -z "$oldpythonpath" ]]; then
    export PYTHONPATH="$GUMP_HOME/pygump/python:$GUMP_HOME/pygump"
  else
    export PYTHONPATH="$GUMP_HOME/pygump/python:$GUMP_HOME/pygump:$PYTHONPATH"
  fi
  
  # import all modules, one by one, to check syntax
  local current=`pwd`
  cd $GUMP_HOME/pygump
  local files=`find . -name '*.py' | sed -e 's/\.\///g' -e 's/\//./g' -e 's/\.py//g' -e 's/python\.//g' | grep -v __init__`
  for i in $files; do
    python -c "import $i"
  done
  cd $current

  # restore python path
  if [[ ! -z "$oldpythonpath" ]]; then
    export PYTHONPATH="$oldpythonpath"
  fi
}

# Run pygump using the specified python command
function do_run
{
  lock

  # add pygump to python path
  local oldpythonpath="$PYTHONPATH"
  if [[ -z "$oldpythonpath" ]]; then
    export PYTHONPATH="$GUMP_HOME/pygump/python:$GUMP_HOME/pygump"
  else
    export PYTHONPATH="$GUMP_HOME/pygump/python:$GUMP_HOME/pygump:$PYTHONPATH"
  fi
  
  local command="$1"
  shift
  
  # run pygump
  local current=`pwd`
  cd "$GUMP_HOME/pygump"
  pycompile

  $GUMP_PYTHON -c "$command" $@
  cd "$current"

  # restore python path
  if [[ ! -z "$oldpythonpath" ]]; then
    export PYTHONPATH="$oldpythonpath"
  fi
  
  unlock
}


# Run pygump in normal mode
function run
{
  do_run "from main import main; main()" $@
}

# Run pygump in the debugger
function debug
{
  do_run "from main import main; import pdb; pdb.run('main()')" $@
}

# Prematurely shut down pygump
function kill
{
  local pidfile="$GUMP_HOME/pygump/pygump.pid"
  if [[ ! -f "$pidfile" ]]; then
    error "Pygump lock file $pidfile not found, no process to kill!"
  fi
  
  local pid=`cat $pidfile`

  local findpid=`ps -o pid --no-headers $pid | sed -e 's/ //g'`
  if [[ -z "$findpid" ]]; then
    error "Process ID specified in Pygump lockfile not found, no process to kill!"
  fi
  
  kill $pid
  
  local findpid=`ps -o pid --no-headers $pid | sed -e 's/ //g'`
  if [[ ! -z "$findpid" ]]; then
    kill -SIGKILL $pid
  fi
  
  local findpid=`ps -o pid --no-headers $pid | sed -e 's/ //g'`
  if [[ ! -z "$findpid" ]]; then
    error "Unable Process ID $pid. Do you have enough permissions to kill it?"
  fi
}

# Run pygump unit tests
function test
{
  lock
  
  # add pygump to python path
  local oldpythonpath="$PYTHONPATH"
  if [[ -z "$oldpythonpath" ]]; then
    export PYTHONPATH="$GUMP_HOME/pygump/python:$GUMP_HOME/pygump"
  else
    export PYTHONPATH="$GUMP_HOME/pygump/python:$GUMP_HOME/pygump:$PYTHONPATH"
  fi

  local current=`pwd`
  cd "$GUMP_HOME/pygump/python"
  pycompile
  
  # Run the pygump tests
  python ../../bin/testrunner.py -d ../python/gump/test $@
  cd "$current"
  
  # restore python path
  if [[ ! -z "$oldpythonpath" ]]; then
    export PYTHONPATH="$oldpythonpath"
  fi
  
  unlock
}

# Run dynagump
function dynagump
{
  # "run" is the default command
  local command="$1"
  shift
  if [[ -z "$command" ]]; then
    command="run"
  fi
  
  local current=`pwd`
  cd "$GUMP_HOME/dynagump"
  ./dynagump.sh "$command" $@
  cd "$current"
}

# Create the gump database
function create_database
{
  local db="$1"
  shift
  if [[ -z "$db" ]]; then
    db="gump"
  fi
  
  # this will also ensure we don't delete an existing database since the
  # create command will fail
  local mysqladminresult=`mysqladmin create "$db" $@`
  if [[ ! -z "$mysqladminresult" ]]; then
    error "Gump failed to create the database $db. mysqladmin said:

$mysqladminresult"
  fi
  
  local mysqlresult=`mysql create "$db" $@ <
    $GUMP_HOME/gumpdb/src/sql/gump3-database-definition.sql`
  
  if [[ ! -z "$mysqlresult" ]]; then
    error "Gump failed to populate the database $db. mysql said:

$mysqlresult"
  fi
}

# Update the gump-related svn checkouts on a particular server
function update_host
{
  local host="$1"
  shift
  if [[ -z "$host" ]]; then
    error "Please specify the host to update."
  fi
  
  local hostscript="$GUMP_HOME/hosts/$host-update.sh"
  if [[ ! -f "$hostscript" ]]; then
    error "Unknown host $host. Please create a file

  $hostscript

to handle the update."
  fi
  
  # execute the script
  local $current=`pwd`
  cd $GUMP_HOME/hosts
  . $hostscript
  cd $current
}

#############################################################################
# Main
#############################################################################
# Control logic and program flow are defined below.

# Figure out which action to execute.
function delegate
{
  local called_as="$0"
  local command="$1"
  shift

  if [[ -z "$command" ]]; then
    error "Illegal command '$command'"
  fi

  # delegate to the command handling functions
  case $command in

    run)
      run $@
      ;;
    debug)
      debug $@
      ;;
    kill)
      kill $@
      ;;
    test)
      test $@
      ;;
    dynagump)
      dynagump $@
      ;;
    create-database)
      create_database $@
      ;;
    update-host)
      update_host $@
      ;;
    pycompile)
      pycompile $@
      ;;
    # this is short-circuited below because we don't really
    # want to load complain about missing environment settings
    # when the user is asking for help...
    #help* | usage | --help | -help | -H | -h)
    #  usage $@
    #  ;;
    '')
      error "Please specify a command"
      ;;
    *)
      error "Unknown command '$command'"
      ;;
  esac
}

# Load environment variables
setup_env

# short circuit the help function because we don't really
# want to load complain about missing environment settings
# when the user is asking for help...
case $1 in
    help* | usage | --help | -help | -H | -h | '')
      shift
      usage $@
      exit 0
esac

# Check we have everything we need
check_environment

# Figure out the action to take then run the appropriate function
delegate $@

# Attempt to clean up leftover commands
#pkill -KILL -P $$
