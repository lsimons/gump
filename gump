#!/bin/sh
#
# Copyright 2004 The Apache Software Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# A (supposedly ) friendly commandline interface to the common gump tasks
#
#############################################################################
# Documentation
#############################################################################

# Documentation for the different commands.
function usage
{
  case $1 in
    run)
      echo "
      Run Gumpy.

      Usage:
        $0 run [gump.py-args ...]

      See http://wiki.apache.org/gump/GumpCommandLineOptions for more
      information about the options Gumpy accepts. The one mandatory
      argument is the "project expression" detailing what to run. You
      will usually want "all" here.
"
        ;;
    debug)
      echo "
      Run Gumpy in debug mode.
      
      Usage:
        $0 debug [gump.py-args ...]
    
      This is the same as executing the 'run' command with a '--debug'
      parameter.
"
        ;;
    test)
      echo "
      Run Gumpy its unit tests.

      Usage:
        $0 test
"
        ;;
    *)
      echo "
      Utility commandline interface for Gump.
     
      Usage:
        $0 command [opts ...]
     
      Available commands are:
     
        run -- run Gumpy
        test -- run Gumpy its unit tests
        get-metadata -- Check out or update metadata from CVS
        validate -- validate the metadata
        help -- print this information
        site -- use Apache Forrest to build the documentation
        site-publish -- use SVN and SSH to publish the site to the website
     
      Run
     
        $0 help [command]
     
      for more information about a particular command.
"
      ;;
  esac
}

#############################################################################
# Utility methods
#############################################################################

# Print an error message and then exit.
function error
{
  echo "$0: $1"
#  usage
  exit 1
}

# Load the environment variables script if it exists
function load_env
{
  if [[ -z "$GUMP_HOME" ]]; then
    # look for this file
    local current=`pwd`
    local thisscript="`pwd`/gump"
    if [[ -f "$thisscript" ]]; then
      # guess...
      export GUMP_HOME=$current
    else
      # complain!
      error "GUMP_HOME is not set and failed to determine it. Please set it to the root of your svn checkout!"
    fi
  fi

  local host=`hostname -s`
  local envfile="$GUMP_HOME/$host-settings.sh"
  if [[ -f $envfile ]]; then
    . $envfile
  fi
}

# Print a friendly error message if some dependency is missing.
#
# Arguments:
#   - name of the command
#   - url to download the package that provides it
function check_env
{
  local cmd=`$GUMP_HOME/bin/PrintPath $1`;
  if [[ -z "$cmd" ]]; then
     error "Cannot find $1. Please retrieve it from 

     $2
     
and install it."
  fi
}

# Print a friendly error message if an environment variable is not set.
#
# Arguments:
#   - name of the variable
#   - description of what the variable should be set to
function check_env_var
{
  local host=`hostname -s`
  local envfile="$GUMP_HOME/cron/local-env-$host.sh"

  local dereferenced=${!1}
  if [[ -z "$dereferenced" ]]; then
    error "The variable $1 has not been set. It should be set to
$2.
You can either set this before invoking gump, or set it in a file
named
  $envfile.sh
"
  fi
}

# Print a friendly error message i a python library is not available.
#
# Arguments:
#   - the library to import
#   - url to download location of the library
function check_env_pylib
{
  cat > "$GUMP_HOME/pycmd.tmp.py" <<ENDCOMMAND
try:
  import $1
except:
  print "error"
ENDCOMMAND
  local cmd=`python "$GUMP_HOME/pycmd.tmp.py"`
  result=`$cmd`
  rm -f "$GUMP_HOME/pycmd.tmp.py"

  if [[ ! -z "$result" ]]; then
    error "Required python library $1 is not available.
Please download it from

  $2

and install it."
  fi
}

# Figure out which action to execute.
function delegate
{
  local called_as=$0
  local command=$1
  shift

  if [[ -z "$command" ]]; then
    error "Illegal command '$command'"
  fi

  # delegate to the command handling functions
  case $command in

    run)
      run $@
      ;;
    debug)
      run --debug $@
      ;;
    test)
      test $@
      ;;
    help | usage | --help | -help | -H | -h)
      usage $@
      ;;
    '')
      error "Please specify a command"
      ;;
    *)
      error "Unknown command '$command'"
      ;;
  esac
}

#############################################################################
# Actions
#############################################################################

# Run gumpy.
function run
{
  check_env "python" "http://www.python.org/"
  check_env "pkill" "http://sourceforge.net/projects/proctools"

  check_env_var "JAVA_HOME" "the location of the java jdk"
  
  check_env_pylib "rdflib" "http://rdflib.net/"
  check_env_pylib "MySQLdb" "http://sourceforge.net/projects/mysql-python"

  local current=`pwd`
  cd $GUMP_HOME/pygump
  ./gump.sh $@
  cd $current
}

# Run gumpy unit tests
function test
{
  check_env "python" "http://www.python.org/"

  local oldpythonpath=$PYTHONPATH
  if [[ -z $oldpythonpath ]]; then
    export PYTHONPATH=`pwd`/python:`pwd`
  else
    export PYTHONPATH=`pwd`/python:`pwd`:$PYTHONPATH
  fi

  # Run the tests
  local current=`pwd`
  cd $GUMP_HOME/pygump/python
  python ../../bin/testrunner.py -d ../python/gump/test $@
  cd $current
}

#############################################################################
# Run the script...
#############################################################################

# Load any environment variables
load_env

# Figure out the action to take then run the appropriate function
delegate $@
