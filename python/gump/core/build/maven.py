#!/usr/bin/python


# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
    Builder for Maven 1.x uses a properties file with paths to dependencies.
"""

import os.path
import time
import gump

from gump import log
from gump.core.build.basebuilder import BaseBuilder, get_command_skeleton, \
    is_debug_enabled, is_verbose_enabled
from gump.core.model.workspace import REASON_PREBUILD_FAILED, STATE_FAILED
from gump.util.file import FILE_TYPE_CONFIG
from gump.util.tools import catFileToFileHolder

#
# Build an Maven command for this project
#
def get_maven_command(project):
    """
    Sets up the maven command line based on the <maven element.
    """
    maven = project.maven

    # The maven goal (or none == maven default goal)
    goal = maven.getGoal()

    # Run Maven...
    cmd = get_command_skeleton(project, 'maven', maven)

    #
    # Allow maven-level debugging...
    #
    if is_debug_enabled(project, maven):
        cmd.addParameter('--debug')
    if is_verbose_enabled(project, maven):
        cmd.addParameter('--exception')

    #
    # Suppress downloads
    #
    cmd.addParameter('--offline')

    # End with the goal...
    if goal:
        for single_goal in goal.split(', '):
            cmd.addParameter(single_goal)

    return cmd

# The props_file parameter is primarily for testing.
def generate_maven_properties(project, language, props_file=None):
    """Set properties/overrides for a Maven project"""

    #:TODO: Does Maven have the idea of system properties?

    #
    # Where to put this:
    #
    basedir = project.maven.getBaseDirectory() or project.getBaseDirectory()
    if not props_file:
        props_file = os.path.abspath(os.path.join(basedir,
                                                  'build.properties'))

    # Ensure containing directory exists, or make it.
    propsdir = os.path.dirname(props_file)
    if not os.path.exists(propsdir):
        project.addInfo('Making directory for Maven properties: [' + \
                            propsdir + ']')
        os.makedirs(propsdir)

    if os.path.exists(props_file):
        project.addWarning('Overriding Maven properties: [' + \
                               props_file + ']')


    props = open(props_file, 'w')

    props.write(("""# ------------------------------------------------------------------------
# DO NOT EDIT  DO NOT EDIT  DO NOT EDIT  DO NOT EDIT  DO NOT EDIT  DO NOT EDIT  DO NOT EDIT
#
# File Automatically Generated by Gump, see http://gump.apache.org/
#
# Generated For : %s
# Generated At  : %s
#
#
# DO NOT EDIT  DO NOT EDIT  DO NOT EDIT  DO NOT EDIT  DO NOT EDIT  DO NOT EDIT  DO NOT EDIT
# ------------------------------------------------------------------------
""")    %       (project.getName(), time.strftime('%Y-%m-%d %H:%M:%S')))

    #
    # Output basic properties
    #
    for prop in project.getWorkspace().getProperties() + \
            project.getMaven().getProperties():
        # build.sysclasspath makes Maven sick.
        if  prop.name != 'build.sysclasspath':
            props.write(('%s = %s\n') % \
                            (prop.name,
                             prop.value.replace('\\', '/'))
                       )

    #
    # Output classpath properties
    #
    props.write("""
# ------------------------------------------------------------------------
# M A V E N  J A R  O V E R R I D E
# ------------------------------------------------------------------------
maven.jar.override = on

# ------------------------------------------------------------------------
# Jars set explicity by path.
# ------------------------------------------------------------------------
""")

    (classpath, bootclasspath) = language.getClasspathObjects(project)

    # :TODO: write...
    for annotated_path in classpath.getPathParts() + \
            bootclasspath.getPathParts():
        if isinstance(annotated_path, gump.core.language.path.AnnotatedPath):
            props.write(('# Contributor: %s\nmaven.jar.%s = %s\n') % \
                (annotated_path.getContributor(),
                 annotated_path.getId(),
                 annotated_path.getPath().replace('\\', '/')))

    return props_file

def locate_maven_project_props(project):
    """Return Maven project properties file location"""
    basedir = project.maven.getBaseDirectory() or project.getBaseDirectory()
    return os.path.abspath(os.path.join(basedir, 'project.properties'))

def locate_maven_pom(project):
    """Return Maven project file location"""
    basedir = project.maven.getBaseDirectory() or project.getBaseDirectory()
    return os.path.abspath(os.path.join(basedir, 'project.xml'))

###############################################################################
# Classes
###############################################################################

class Maven1Builder(BaseBuilder):
    """
    Builder for Maven 1.x uses a properties file with paths to dependencies.
    """

    def __init__(self, run):
        BaseBuilder.__init__(self, run, 'Maven')

    def get_command(self, project, language):
        """
        Set up the Cmd instance for running Maven
        """
        cmd = get_maven_command(project)
        if cmd:
            jvmargs = language.getJVMArgs(project)
            if jvmargs and len(list(jvmargs.items())) > 0:
                cmd.addEnvironment('MAVEN_OPTS', jvmargs.formatCommandLine())
        return cmd

    def pre_build(self, project, language, _stats):
        """
        Generate build.properties
        """
        if project.okToPerformWork():
            try:
                props_file = generate_maven_properties(project, language)
                project.addDebug('(Apache Gump generated) Apache Maven Properties in: ' + \
                                 props_file)

                try:
                    catFileToFileHolder(project, props_file,
                                        FILE_TYPE_CONFIG,
                                        os.path.basename(props_file))
                except:
                    log.error('Display Properties [ ' + props_file + \
                                  '] Failed', exc_info=1)

            except Exception as details:
                message = 'Generate Maven Properties Failed:' + str(details)
                log.error(message, exc_info=1)
                project.addError(message)
                project.changeState(STATE_FAILED, REASON_PREBUILD_FAILED)

    def post_build(self, project, _language, _stats):
        """
        Attach POM and build.properties to output.
        """
        pom = locate_maven_pom(project)
        if os.path.exists(pom):
            project.addDebug('Maven POM in: ' + pom)
            catFileToFileHolder(project, pom, FILE_TYPE_CONFIG)

        props = locate_maven_project_props(project)
        if os.path.exists(props):
            project.addDebug('Maven project properties in: ' + props)
            catFileToFileHolder(project, props, FILE_TYPE_CONFIG)

